// Generated by rstantools.  Do not edit by hand.

/*
    gfac is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    gfac is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with gfac.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_gMVNGPFA_LP_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gMVNGPFA_LP");
    reader.add_event(121, 119, "end", "model_gMVNGPFA_LP");
    return reader;
}
template <typename T1__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
GP_LPK(const int& Nx,
           const std::vector<T1__>& x,
           const int& Ny,
           const std::vector<T3__>& y,
           const T4__& alpha2,
           const T5__& rho2,
           const T6__& rho3,
           const T7__& period_length, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("K2", "Nx", Nx);
        validate_non_negative_index("K2", "Ny", Ny);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K2(Nx, Ny);
        stan::math::initialize(K2, DUMMY_VAR__);
        stan::math::fill(K2, DUMMY_VAR__);
        current_statement_begin__ = 12;
        validate_non_negative_index("Sigma", "Nx", Nx);
        validate_non_negative_index("Sigma", "Ny", Ny);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(Nx, Ny);
        stan::math::initialize(Sigma, DUMMY_VAR__);
        stan::math::fill(Sigma, DUMMY_VAR__);
        current_statement_begin__ = 13;
        for (int i = 1; i <= Nx; ++i) {
            current_statement_begin__ = 14;
            for (int j = 1; j <= Ny; ++j) {
                current_statement_begin__ = 15;
                stan::model::assign(K2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            ((alpha2 * stan::math::exp(((-(2) * square(stan::math::sin(((stan::math::pi() * stan::math::fabs((get_base1(x, i, "x", 1) - get_base1(y, j, "y", 1)))) / period_length)))) / square(rho2)))) * stan::math::exp(((-(square((get_base1(x, i, "x", 1) - get_base1(y, j, "y", 1)))) / 2) / square(rho3)))), 
                            "assigning variable K2");
            }
        }
        current_statement_begin__ = 19;
        stan::math::assign(Sigma, K2);
        current_statement_begin__ = 20;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Sigma);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct GP_LPK_functor__ {
    template <typename T1__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& Nx,
           const std::vector<T1__>& x,
           const int& Ny,
           const std::vector<T3__>& y,
           const T4__& alpha2,
           const T5__& rho2,
           const T6__& rho3,
           const T7__& period_length, std::ostream* pstream__) const {
        return GP_LPK(Nx, x, Ny, y, alpha2, rho2, rho3, period_length, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_gMVNGPFA_LP : public prob_grad {
private:
        int N;
        int NG;
        int M;
        int P;
        std::vector<double> t;
        std::vector<int> G;
        matrix_d X;
        std::vector<int> p_dist;
        std::vector<double> p_val;
        double period_length;
        double sq_sigma;
public:
    model_gMVNGPFA_LP(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gMVNGPFA_LP(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gMVNGPFA_LP_namespace::model_gMVNGPFA_LP";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "NG", "int", context__.to_vec());
            NG = int(0);
            vals_i__ = context__.vals_i("NG");
            pos__ = 0;
            NG = vals_i__[pos__++];
            check_greater_or_equal(function__, "NG", NG, 1);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            check_greater_or_equal(function__, "M", M, 1);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 28;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "double", context__.to_vec(N));
            t = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
                t[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("G", "NG", NG);
            context__.validate_dims("data initialization", "G", "int", context__.to_vec(NG));
            G = std::vector<int>(NG, int(0));
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            size_t G_k_0_max__ = NG;
            for (size_t k_0__ = 0; k_0__ < G_k_0_max__; ++k_0__) {
                G[k_0__] = vals_i__[pos__++];
            }
            size_t G_i_0_max__ = NG;
            for (size_t i_0__ = 0; i_0__ < G_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "G[i_0__]", G[i_0__], 1);
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("X", "M", M);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(M,N));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(M, N);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = N;
            size_t X_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("p_dist", "3", 3);
            context__.validate_dims("data initialization", "p_dist", "int", context__.to_vec(3));
            p_dist = std::vector<int>(3, int(0));
            vals_i__ = context__.vals_i("p_dist");
            pos__ = 0;
            size_t p_dist_k_0_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < p_dist_k_0_max__; ++k_0__) {
                p_dist[k_0__] = vals_i__[pos__++];
            }
            size_t p_dist_i_0_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < p_dist_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "p_dist[i_0__]", p_dist[i_0__], 0);
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("p_val", "6", 6);
            context__.validate_dims("data initialization", "p_val", "double", context__.to_vec(6));
            p_val = std::vector<double>(6, double(0));
            vals_r__ = context__.vals_r("p_val");
            pos__ = 0;
            size_t p_val_k_0_max__ = 6;
            for (size_t k_0__ = 0; k_0__ < p_val_k_0_max__; ++k_0__) {
                p_val[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "period_length", "double", context__.to_vec());
            period_length = double(0);
            vals_r__ = context__.vals_r("period_length");
            pos__ = 0;
            period_length = vals_r__[pos__++];
            check_greater_or_equal(function__, "period_length", period_length, 0);
            // initialize transformed data variables
            current_statement_begin__ = 40;
            sq_sigma = double(0);
            stan::math::fill(sq_sigma, DUMMY_VAR__);
            stan::math::assign(sq_sigma,0.00000001);
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 43;
            validate_non_negative_index("simp", "M", M);
            validate_non_negative_index("simp", "P", P);
            num_params_r__ += (M * P);
            current_statement_begin__ = 44;
            validate_non_negative_index("fn_pri", "P", P);
            validate_non_negative_index("fn_pri", "N", N);
            num_params_r__ += (P * N);
            current_statement_begin__ = 45;
            validate_non_negative_index("base", "M", M);
            validate_non_negative_index("base", "NG", NG);
            num_params_r__ += (M * NG);
            current_statement_begin__ = 47;
            validate_non_negative_index("a2", "P", P);
            validate_non_negative_index("a2", "NG", NG);
            num_params_r__ += (P * NG);
            current_statement_begin__ = 48;
            validate_non_negative_index("r2", "P", P);
            validate_non_negative_index("r2", "NG", NG);
            num_params_r__ += (P * NG);
            current_statement_begin__ = 49;
            validate_non_negative_index("r3", "P", P);
            validate_non_negative_index("r3", "NG", NG);
            num_params_r__ += (P * NG);
            current_statement_begin__ = 51;
            validate_non_negative_index("L_Omega", "M", M);
            validate_non_negative_index("L_Omega", "M", M);
            num_params_r__ += ((M * (M - 1)) / 2);
            current_statement_begin__ = 52;
            validate_non_negative_index("L_sigma", "M", M);
            num_params_r__ += M;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gMVNGPFA_LP() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 43;
        if (!(context__.contains_r("simp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable simp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("simp");
        pos__ = 0U;
        validate_non_negative_index("simp", "M", M);
        validate_non_negative_index("simp", "P", P);
        context__.validate_dims("parameter initialization", "simp", "matrix_d", context__.to_vec(M,P));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> simp(M, P);
        size_t simp_j_2_max__ = P;
        size_t simp_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < simp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
                simp(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(simp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable simp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("fn_pri")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable fn_pri missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("fn_pri");
        pos__ = 0U;
        validate_non_negative_index("fn_pri", "P", P);
        validate_non_negative_index("fn_pri", "N", N);
        context__.validate_dims("parameter initialization", "fn_pri", "matrix_d", context__.to_vec(P,N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> fn_pri(P, N);
        size_t fn_pri_j_2_max__ = N;
        size_t fn_pri_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < fn_pri_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < fn_pri_j_1_max__; ++j_1__) {
                fn_pri(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(fn_pri);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable fn_pri: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("base")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable base missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("base");
        pos__ = 0U;
        validate_non_negative_index("base", "M", M);
        validate_non_negative_index("base", "NG", NG);
        context__.validate_dims("parameter initialization", "base", "vector_d", context__.to_vec(NG,M));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > base(NG, Eigen::Matrix<double, Eigen::Dynamic, 1>(M));
        size_t base_j_1_max__ = M;
        size_t base_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < base_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < base_k_0_max__; ++k_0__) {
                base[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t base_i_0_max__ = NG;
        for (size_t i_0__ = 0; i_0__ < base_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(base[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable base: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 47;
        if (!(context__.contains_r("a2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a2");
        pos__ = 0U;
        validate_non_negative_index("a2", "P", P);
        validate_non_negative_index("a2", "NG", NG);
        context__.validate_dims("parameter initialization", "a2", "vector_d", context__.to_vec(NG,P));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > a2(NG, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));
        size_t a2_j_1_max__ = P;
        size_t a2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < a2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
                a2[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t a2_i_0_max__ = NG;
        for (size_t i_0__ = 0; i_0__ < a2_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, a2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 48;
        if (!(context__.contains_r("r2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r2");
        pos__ = 0U;
        validate_non_negative_index("r2", "P", P);
        validate_non_negative_index("r2", "NG", NG);
        context__.validate_dims("parameter initialization", "r2", "vector_d", context__.to_vec(NG,P));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > r2(NG, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));
        size_t r2_j_1_max__ = P;
        size_t r2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r2_k_0_max__; ++k_0__) {
                r2[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t r2_i_0_max__ = NG;
        for (size_t i_0__ = 0; i_0__ < r2_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, r2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 49;
        if (!(context__.contains_r("r3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r3");
        pos__ = 0U;
        validate_non_negative_index("r3", "P", P);
        validate_non_negative_index("r3", "NG", NG);
        context__.validate_dims("parameter initialization", "r3", "vector_d", context__.to_vec(NG,P));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > r3(NG, Eigen::Matrix<double, Eigen::Dynamic, 1>(P));
        size_t r3_j_1_max__ = P;
        size_t r3_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r3_k_0_max__; ++k_0__) {
                r3[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t r3_i_0_max__ = NG;
        for (size_t i_0__ = 0; i_0__ < r3_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(0, r3[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r3: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("L_Omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_Omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_Omega");
        pos__ = 0U;
        validate_non_negative_index("L_Omega", "M", M);
        validate_non_negative_index("L_Omega", "M", M);
        context__.validate_dims("parameter initialization", "L_Omega", "matrix_d", context__.to_vec(M,M));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega(M, M);
        size_t L_Omega_j_2_max__ = M;
        size_t L_Omega_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                L_Omega(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L_Omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_Omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 52;
        if (!(context__.contains_r("L_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L_sigma");
        pos__ = 0U;
        validate_non_negative_index("L_sigma", "M", M);
        context__.validate_dims("parameter initialization", "L_sigma", "vector_d", context__.to_vec(M));
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma(M);
        size_t L_sigma_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < L_sigma_j_1_max__; ++j_1__) {
            L_sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, L_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> simp;
            (void) simp;  // dummy to suppress unused var warning
            if (jacobian__)
                simp = in__.matrix_constrain(M, P, lp__);
            else
                simp = in__.matrix_constrain(M, P);
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> fn_pri;
            (void) fn_pri;  // dummy to suppress unused var warning
            if (jacobian__)
                fn_pri = in__.matrix_constrain(P, N, lp__);
            else
                fn_pri = in__.matrix_constrain(P, N);
            current_statement_begin__ = 45;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > base;
            size_t base_d_0_max__ = NG;
            base.reserve(base_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < base_d_0_max__; ++d_0__) {
                if (jacobian__)
                    base.push_back(in__.vector_constrain(M, lp__));
                else
                    base.push_back(in__.vector_constrain(M));
            }
            current_statement_begin__ = 47;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > a2;
            size_t a2_d_0_max__ = NG;
            a2.reserve(a2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < a2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    a2.push_back(in__.vector_lb_constrain(0, P, lp__));
                else
                    a2.push_back(in__.vector_lb_constrain(0, P));
            }
            current_statement_begin__ = 48;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > r2;
            size_t r2_d_0_max__ = NG;
            r2.reserve(r2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < r2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    r2.push_back(in__.vector_lb_constrain(0, P, lp__));
                else
                    r2.push_back(in__.vector_lb_constrain(0, P));
            }
            current_statement_begin__ = 49;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > r3;
            size_t r3_d_0_max__ = NG;
            r3.reserve(r3_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < r3_d_0_max__; ++d_0__) {
                if (jacobian__)
                    r3.push_back(in__.vector_lb_constrain(0, P, lp__));
                else
                    r3.push_back(in__.vector_lb_constrain(0, P));
            }
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Omega;
            (void) L_Omega;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Omega = in__.cholesky_factor_corr_constrain(M, lp__);
            else
                L_Omega = in__.cholesky_factor_corr_constrain(M);
            current_statement_begin__ = 52;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> L_sigma;
            (void) L_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                L_sigma = in__.vector_lb_constrain(0, M, lp__);
            else
                L_sigma = in__.vector_lb_constrain(0, M);
            // transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("Psi", "M", M);
            validate_non_negative_index("Psi", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Psi(M, P);
            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi, DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("mu_fac", "M", M);
            validate_non_negative_index("mu_fac", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu_fac(M, N);
            stan::math::initialize(mu_fac, DUMMY_VAR__);
            stan::math::fill(mu_fac, DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("fn", "P", P);
            validate_non_negative_index("fn", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> fn(P, N);
            stan::math::initialize(fn, DUMMY_VAR__);
            stan::math::fill(fn, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 59;
            for (int p = 1; p <= P; ++p) {
                {
                current_statement_begin__ = 60;
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());
                current_statement_begin__ = 61;
                stan::math::assign(pos, 1);
                current_statement_begin__ = 62;
                for (int ng = 1; ng <= NG; ++ng) {
                    {
                    current_statement_begin__ = 63;
                    validate_non_negative_index("L_K_tmp", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    validate_non_negative_index("L_K_tmp", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K_tmp(get_base1(G, ng, "G", 1), get_base1(G, ng, "G", 1));
                    stan::math::initialize(L_K_tmp, DUMMY_VAR__);
                    stan::math::fill(L_K_tmp, DUMMY_VAR__);
                    current_statement_begin__ = 64;
                    validate_non_negative_index("K", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    validate_non_negative_index("K", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(get_base1(G, ng, "G", 1), get_base1(G, ng, "G", 1));
                    stan::math::initialize(K, DUMMY_VAR__);
                    stan::math::fill(K, DUMMY_VAR__);
                    current_statement_begin__ = 65;
                    stan::math::assign(K, GP_LPK(get_base1(G, ng, "G", 1), stan::model::rvalue(t, stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list()), "t"), get_base1(G, ng, "G", 1), stan::model::rvalue(t, stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list()), "t"), get_base1(get_base1(a2, ng, "a2", 1), p, "a2", 2), get_base1(get_base1(r2, ng, "r2", 1), p, "r2", 2), get_base1(get_base1(r3, ng, "r3", 1), p, "r3", 2), period_length, pstream__));
                    current_statement_begin__ = 66;
                    stan::math::assign(K, add(K, diag_matrix(rep_vector(sq_sigma, get_base1(G, ng, "G", 1)))));
                    current_statement_begin__ = 67;
                    stan::math::assign(L_K_tmp, cholesky_decompose(K));
                    current_statement_begin__ = 68;
                    stan::model::assign(fn, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), 
                                multiply(stan::model::rvalue(fn_pri, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), "fn_pri"), transpose(L_K_tmp)), 
                                "assigning variable fn");
                    current_statement_begin__ = 69;
                    stan::math::assign(pos, (pos + get_base1(G, ng, "G", 1)));
                    }
                }
                current_statement_begin__ = 71;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 72;
                    if (as_bool(logical_eq(p, m))) {
                        current_statement_begin__ = 73;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                    1, 
                                    "assigning variable Psi");
                    } else if (as_bool(logical_gt(p, m))) {
                        current_statement_begin__ = 75;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable Psi");
                    } else {
                        current_statement_begin__ = 77;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                    get_base1(simp, m, p, "simp", 1), 
                                    "assigning variable Psi");
                    }
                }
                }
            }
            current_statement_begin__ = 81;
            stan::math::assign(mu_fac, multiply(Psi, fn));
            {
            current_statement_begin__ = 83;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning
            stan::math::fill(pos, std::numeric_limits<int>::min());
            current_statement_begin__ = 84;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 85;
            for (int ng = 1; ng <= NG; ++ng) {
                current_statement_begin__ = 86;
                stan::model::assign(mu_fac, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(stan::model::rvalue(mu_fac, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), "mu_fac"), multiply(stan::model::rvalue(base, stan::model::cons_list(stan::model::index_uni(ng), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "base"), transpose(rep_vector(1, get_base1(G, ng, "G", 1)))))), 
                            "assigning variable mu_fac");
                current_statement_begin__ = 87;
                stan::math::assign(pos, (pos + get_base1(G, ng, "G", 1)));
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 55;
            size_t Psi_j_1_max__ = M;
            size_t Psi_j_2_max__ = P;
            for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Psi(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Psi" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 56;
            size_t mu_fac_j_1_max__ = M;
            size_t mu_fac_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_fac_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu_fac_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu_fac(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu_fac" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_fac: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 57;
            size_t fn_j_1_max__ = P;
            size_t fn_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < fn_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < fn_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(fn(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: fn" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable fn: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 93;
            validate_non_negative_index("L_Sigma", "M", M);
            validate_non_negative_index("L_Sigma", "M", M);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Sigma(M, M);
            stan::math::initialize(L_Sigma, DUMMY_VAR__);
            stan::math::fill(L_Sigma, DUMMY_VAR__);
            current_statement_begin__ = 94;
            stan::math::assign(L_Sigma, diag_pre_multiply(L_sigma, L_Omega));
            current_statement_begin__ = 95;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L_Omega, 2));
            current_statement_begin__ = 96;
            lp_accum__.add(student_t_log<propto__>(L_sigma, 3, 0, 1));
            current_statement_begin__ = 99;
            for (int ng = 1; ng <= NG; ++ng) {
                current_statement_begin__ = 100;
                lp_accum__.add(student_t_log<propto__>(stan::model::rvalue(a2, stan::model::cons_list(stan::model::index_uni(ng), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "a2"), 3, 0, 1));
                current_statement_begin__ = 101;
                if (as_bool(logical_eq(get_base1(p_dist, 1, "p_dist", 1), 1))) {
                    current_statement_begin__ = 102;
                    lp_accum__.add(inv_gamma_log<propto__>(stan::model::rvalue(r2, stan::model::cons_list(stan::model::index_uni(ng), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "r2"), get_base1(p_val, 1, "p_val", 1), get_base1(p_val, 2, "p_val", 1)));
                }
                current_statement_begin__ = 104;
                if (as_bool(logical_eq(get_base1(p_dist, 2, "p_dist", 1), 1))) {
                    current_statement_begin__ = 105;
                    lp_accum__.add(inv_gamma_log<propto__>(stan::model::rvalue(r3, stan::model::cons_list(stan::model::index_uni(ng), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "r3"), get_base1(p_val, 3, "p_val", 1), get_base1(p_val, 4, "p_val", 1)));
                }
                current_statement_begin__ = 107;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(base, stan::model::cons_list(stan::model::index_uni(ng), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "base"), 0, 10));
            }
            current_statement_begin__ = 109;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 110;
                lp_accum__.add(normal_log<propto__>(get_base1(fn_pri, p, "fn_pri", 1), 0, 1));
            }
            current_statement_begin__ = 112;
            for (int m = 1; m <= M; ++m) {
                current_statement_begin__ = 113;
                lp_accum__.add(normal_log<propto__>(get_base1(simp, m, "simp", 1), 0, 1));
            }
            current_statement_begin__ = 115;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 116;
                lp_accum__.add(multi_normal_cholesky_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "X"), stan::model::rvalue(mu_fac, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "mu_fac"), L_Sigma));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("simp");
        names__.push_back("fn_pri");
        names__.push_back("base");
        names__.push_back("a2");
        names__.push_back("r2");
        names__.push_back("r3");
        names__.push_back("L_Omega");
        names__.push_back("L_sigma");
        names__.push_back("Psi");
        names__.push_back("mu_fac");
        names__.push_back("fn");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NG);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NG);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NG);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NG);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gMVNGPFA_LP_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> simp = in__.matrix_constrain(M, P);
        size_t simp_j_2_max__ = P;
        size_t simp_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < simp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
                vars__.push_back(simp(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> fn_pri = in__.matrix_constrain(P, N);
        size_t fn_pri_j_2_max__ = N;
        size_t fn_pri_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < fn_pri_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < fn_pri_j_1_max__; ++j_1__) {
                vars__.push_back(fn_pri(j_1__, j_2__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > base;
        size_t base_d_0_max__ = NG;
        base.reserve(base_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < base_d_0_max__; ++d_0__) {
            base.push_back(in__.vector_constrain(M));
        }
        size_t base_j_1_max__ = M;
        size_t base_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < base_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < base_k_0_max__; ++k_0__) {
                vars__.push_back(base[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > a2;
        size_t a2_d_0_max__ = NG;
        a2.reserve(a2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < a2_d_0_max__; ++d_0__) {
            a2.push_back(in__.vector_lb_constrain(0, P));
        }
        size_t a2_j_1_max__ = P;
        size_t a2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < a2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
                vars__.push_back(a2[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > r2;
        size_t r2_d_0_max__ = NG;
        r2.reserve(r2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < r2_d_0_max__; ++d_0__) {
            r2.push_back(in__.vector_lb_constrain(0, P));
        }
        size_t r2_j_1_max__ = P;
        size_t r2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r2_k_0_max__; ++k_0__) {
                vars__.push_back(r2[k_0__](j_1__));
            }
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > r3;
        size_t r3_d_0_max__ = NG;
        r3.reserve(r3_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < r3_d_0_max__; ++d_0__) {
            r3.push_back(in__.vector_lb_constrain(0, P));
        }
        size_t r3_j_1_max__ = P;
        size_t r3_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r3_k_0_max__; ++k_0__) {
                vars__.push_back(r3[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_Omega = in__.cholesky_factor_corr_constrain(M);
        size_t L_Omega_j_2_max__ = M;
        size_t L_Omega_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                vars__.push_back(L_Omega(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> L_sigma = in__.vector_lb_constrain(0, M);
        size_t L_sigma_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < L_sigma_j_1_max__; ++j_1__) {
            vars__.push_back(L_sigma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 55;
            validate_non_negative_index("Psi", "M", M);
            validate_non_negative_index("Psi", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Psi(M, P);
            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi, DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("mu_fac", "M", M);
            validate_non_negative_index("mu_fac", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu_fac(M, N);
            stan::math::initialize(mu_fac, DUMMY_VAR__);
            stan::math::fill(mu_fac, DUMMY_VAR__);
            current_statement_begin__ = 57;
            validate_non_negative_index("fn", "P", P);
            validate_non_negative_index("fn", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> fn(P, N);
            stan::math::initialize(fn, DUMMY_VAR__);
            stan::math::fill(fn, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 59;
            for (int p = 1; p <= P; ++p) {
                {
                current_statement_begin__ = 60;
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning
                stan::math::fill(pos, std::numeric_limits<int>::min());
                current_statement_begin__ = 61;
                stan::math::assign(pos, 1);
                current_statement_begin__ = 62;
                for (int ng = 1; ng <= NG; ++ng) {
                    {
                    current_statement_begin__ = 63;
                    validate_non_negative_index("L_K_tmp", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    validate_non_negative_index("L_K_tmp", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_K_tmp(get_base1(G, ng, "G", 1), get_base1(G, ng, "G", 1));
                    stan::math::initialize(L_K_tmp, DUMMY_VAR__);
                    stan::math::fill(L_K_tmp, DUMMY_VAR__);
                    current_statement_begin__ = 64;
                    validate_non_negative_index("K", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    validate_non_negative_index("K", "get_base1(G, ng, \"G\", 1)", get_base1(G, ng, "G", 1));
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(get_base1(G, ng, "G", 1), get_base1(G, ng, "G", 1));
                    stan::math::initialize(K, DUMMY_VAR__);
                    stan::math::fill(K, DUMMY_VAR__);
                    current_statement_begin__ = 65;
                    stan::math::assign(K, GP_LPK(get_base1(G, ng, "G", 1), stan::model::rvalue(t, stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list()), "t"), get_base1(G, ng, "G", 1), stan::model::rvalue(t, stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list()), "t"), get_base1(get_base1(a2, ng, "a2", 1), p, "a2", 2), get_base1(get_base1(r2, ng, "r2", 1), p, "r2", 2), get_base1(get_base1(r3, ng, "r3", 1), p, "r3", 2), period_length, pstream__));
                    current_statement_begin__ = 66;
                    stan::math::assign(K, add(K, diag_matrix(rep_vector(sq_sigma, get_base1(G, ng, "G", 1)))));
                    current_statement_begin__ = 67;
                    stan::math::assign(L_K_tmp, cholesky_decompose(K));
                    current_statement_begin__ = 68;
                    stan::model::assign(fn, 
                                stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), 
                                multiply(stan::model::rvalue(fn_pri, stan::model::cons_list(stan::model::index_uni(p), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), "fn_pri"), transpose(L_K_tmp)), 
                                "assigning variable fn");
                    current_statement_begin__ = 69;
                    stan::math::assign(pos, (pos + get_base1(G, ng, "G", 1)));
                    }
                }
                current_statement_begin__ = 71;
                for (int m = 1; m <= M; ++m) {
                    current_statement_begin__ = 72;
                    if (as_bool(logical_eq(p, m))) {
                        current_statement_begin__ = 73;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                    1, 
                                    "assigning variable Psi");
                    } else if (as_bool(logical_gt(p, m))) {
                        current_statement_begin__ = 75;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable Psi");
                    } else {
                        current_statement_begin__ = 77;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_uni(p), stan::model::nil_index_list())), 
                                    get_base1(simp, m, p, "simp", 1), 
                                    "assigning variable Psi");
                    }
                }
                }
            }
            current_statement_begin__ = 81;
            stan::math::assign(mu_fac, multiply(Psi, fn));
            {
            current_statement_begin__ = 83;
            int pos(0);
            (void) pos;  // dummy to suppress unused var warning
            stan::math::fill(pos, std::numeric_limits<int>::min());
            current_statement_begin__ = 84;
            stan::math::assign(pos, 1);
            current_statement_begin__ = 85;
            for (int ng = 1; ng <= NG; ++ng) {
                current_statement_begin__ = 86;
                stan::model::assign(mu_fac, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), 
                            stan::model::deep_copy(add(stan::model::rvalue(mu_fac, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(pos, ((pos + get_base1(G, ng, "G", 1)) - 1)), stan::model::nil_index_list())), "mu_fac"), multiply(stan::model::rvalue(base, stan::model::cons_list(stan::model::index_uni(ng), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "base"), transpose(rep_vector(1, get_base1(G, ng, "G", 1)))))), 
                            "assigning variable mu_fac");
                current_statement_begin__ = 87;
                stan::math::assign(pos, (pos + get_base1(G, ng, "G", 1)));
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t Psi_j_2_max__ = P;
                size_t Psi_j_1_max__ = M;
                for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                        vars__.push_back(Psi(j_1__, j_2__));
                    }
                }
                size_t mu_fac_j_2_max__ = N;
                size_t mu_fac_j_1_max__ = M;
                for (size_t j_2__ = 0; j_2__ < mu_fac_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu_fac_j_1_max__; ++j_1__) {
                        vars__.push_back(mu_fac(j_1__, j_2__));
                    }
                }
                size_t fn_j_2_max__ = N;
                size_t fn_j_1_max__ = P;
                for (size_t j_2__ = 0; j_2__ < fn_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < fn_j_1_max__; ++j_1__) {
                        vars__.push_back(fn(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_gMVNGPFA_LP";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t simp_j_2_max__ = P;
        size_t simp_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < simp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "simp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t fn_pri_j_2_max__ = N;
        size_t fn_pri_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < fn_pri_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < fn_pri_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fn_pri" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t base_j_1_max__ = M;
        size_t base_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < base_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < base_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "base" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t a2_j_1_max__ = P;
        size_t a2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < a2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t r2_j_1_max__ = P;
        size_t r2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t r3_j_1_max__ = P;
        size_t r3_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r3_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r3" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_2_max__ = M;
        size_t L_Omega_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < L_Omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_sigma_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < L_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Psi_j_2_max__ = P;
            size_t Psi_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_fac_j_2_max__ = N;
            size_t mu_fac_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < mu_fac_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_fac_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_fac" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t fn_j_2_max__ = N;
            size_t fn_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < fn_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < fn_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "fn" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t simp_j_2_max__ = P;
        size_t simp_j_1_max__ = M;
        for (size_t j_2__ = 0; j_2__ < simp_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "simp" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t fn_pri_j_2_max__ = N;
        size_t fn_pri_j_1_max__ = P;
        for (size_t j_2__ = 0; j_2__ < fn_pri_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < fn_pri_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fn_pri" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t base_j_1_max__ = M;
        size_t base_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < base_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < base_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "base" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t a2_j_1_max__ = P;
        size_t a2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < a2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < a2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "a2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t r2_j_1_max__ = P;
        size_t r2_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r2_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r2" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t r3_j_1_max__ = P;
        size_t r3_k_0_max__ = NG;
        for (size_t j_1__ = 0; j_1__ < r3_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < r3_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r3" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t L_Omega_j_1_max__ = ((M * (M - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_Omega_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Omega" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_sigma_j_1_max__ = M;
        for (size_t j_1__ = 0; j_1__ < L_sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Psi_j_2_max__ = P;
            size_t Psi_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_fac_j_2_max__ = N;
            size_t mu_fac_j_1_max__ = M;
            for (size_t j_2__ = 0; j_2__ < mu_fac_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_fac_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu_fac" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t fn_j_2_max__ = N;
            size_t fn_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < fn_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < fn_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "fn" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_gMVNGPFA_LP_namespace::model_gMVNGPFA_LP stan_model;
#endif
