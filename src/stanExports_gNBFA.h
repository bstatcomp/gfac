// Generated by rstantools.  Do not edit by hand.

/*
    gfac is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    gfac is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with gfac.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_gNBFA_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gNBFA");
    reader.add_event(47, 45, "end", "model_gNBFA");
    return reader;
}
#include <stan_meta_header.hpp>
class model_gNBFA : public prob_grad {
private:
        int n;
        int m;
        int p;
        std::vector<int> g;
        int ng;
        std::vector<std::vector<int> > X;
public:
    model_gNBFA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gNBFA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gNBFA_namespace::model_gNBFA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            check_greater_or_equal(function__, "m", m, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("g", "n", n);
            context__.validate_dims("data initialization", "g", "int", context__.to_vec(n));
            g = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("g");
            pos__ = 0;
            size_t g_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < g_k_0_max__; ++k_0__) {
                g[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "ng", "int", context__.to_vec());
            ng = int(0);
            vals_i__ = context__.vals_i("ng");
            pos__ = 0;
            ng = vals_i__[pos__++];
            check_greater_or_equal(function__, "ng", ng, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("X", "m", m);
            validate_non_negative_index("X", "n", n);
            context__.validate_dims("data initialization", "X", "int", context__.to_vec(m,n));
            X = std::vector<std::vector<int> >(m, std::vector<int>(n, int(0)));
            vals_i__ = context__.vals_i("X");
            pos__ = 0;
            size_t X_k_0_max__ = m;
            size_t X_k_1_max__ = n;
            for (size_t k_1__ = 0; k_1__ < X_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                    X[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("Theta", "p", p);
            validate_non_negative_index("Theta", "ng", ng);
            num_params_r__ += (p * ng);
            current_statement_begin__ = 12;
            validate_non_negative_index("rk", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 13;
            validate_non_negative_index("pk", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 14;
            validate_non_negative_index("simp", "m", m);
            validate_non_negative_index("simp", "p", p);
            num_params_r__ += ((m - 1) * p);
            current_statement_begin__ = 15;
            validate_non_negative_index("phi", "m", m);
            num_params_r__ += m;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gNBFA() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 11;
        if (!(context__.contains_r("Theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Theta");
        pos__ = 0U;
        validate_non_negative_index("Theta", "p", p);
        validate_non_negative_index("Theta", "ng", ng);
        context__.validate_dims("parameter initialization", "Theta", "matrix_d", context__.to_vec(p,ng));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Theta(p, ng);
        size_t Theta_j_2_max__ = ng;
        size_t Theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                Theta(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, Theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 12;
        if (!(context__.contains_r("rk")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rk missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rk");
        pos__ = 0U;
        validate_non_negative_index("rk", "p", p);
        context__.validate_dims("parameter initialization", "rk", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rk(p);
        size_t rk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < rk_j_1_max__; ++j_1__) {
            rk(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, rk);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rk: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("pk")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pk missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pk");
        pos__ = 0U;
        validate_non_negative_index("pk", "p", p);
        context__.validate_dims("parameter initialization", "pk", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> pk(p);
        size_t pk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < pk_j_1_max__; ++j_1__) {
            pk(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, pk);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pk: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("simp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable simp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("simp");
        pos__ = 0U;
        validate_non_negative_index("simp", "m", m);
        validate_non_negative_index("simp", "p", p);
        context__.validate_dims("parameter initialization", "simp", "vector_d", context__.to_vec(p,m));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > simp(p, Eigen::Matrix<double, Eigen::Dynamic, 1>(m));
        size_t simp_j_1_max__ = m;
        size_t simp_k_0_max__ = p;
        for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < simp_k_0_max__; ++k_0__) {
                simp[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t simp_i_0_max__ = p;
        for (size_t i_0__ = 0; i_0__ < simp_i_0_max__; ++i_0__) {
            try {
                writer__.simplex_unconstrain(simp[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable simp: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "m", m);
        context__.validate_dims("parameter initialization", "phi", "vector_d", context__.to_vec(m));
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi(m);
        size_t phi_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 11;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Theta;
            (void) Theta;  // dummy to suppress unused var warning
            if (jacobian__)
                Theta = in__.matrix_lb_constrain(0, p, ng, lp__);
            else
                Theta = in__.matrix_lb_constrain(0, p, ng);
            current_statement_begin__ = 12;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rk;
            (void) rk;  // dummy to suppress unused var warning
            if (jacobian__)
                rk = in__.vector_lb_constrain(0, p, lp__);
            else
                rk = in__.vector_lb_constrain(0, p);
            current_statement_begin__ = 13;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pk;
            (void) pk;  // dummy to suppress unused var warning
            if (jacobian__)
                pk = in__.vector_lub_constrain(0, 1, p, lp__);
            else
                pk = in__.vector_lub_constrain(0, 1, p);
            current_statement_begin__ = 14;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > simp;
            size_t simp_d_0_max__ = p;
            simp.reserve(simp_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < simp_d_0_max__; ++d_0__) {
                if (jacobian__)
                    simp.push_back(in__.simplex_constrain(m, lp__));
                else
                    simp.push_back(in__.simplex_constrain(m));
            }
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.vector_lb_constrain(0, m, lp__);
            else
                phi = in__.vector_lb_constrain(0, m);
            // transformed parameters
            current_statement_begin__ = 19;
            validate_non_negative_index("Psi", "m", m);
            validate_non_negative_index("Psi", "p", p);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Psi(m, p);
            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi, DUMMY_VAR__);
            current_statement_begin__ = 20;
            validate_non_negative_index("mu", "m", m);
            validate_non_negative_index("mu", "ng", ng);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu(m, ng);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 21;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 22;
                stan::model::assign(Psi, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            get_base1(simp, i, "simp", 1), 
                            "assigning variable Psi");
            }
            current_statement_begin__ = 24;
            for (int i = 1; i <= ng; ++i) {
                current_statement_begin__ = 25;
                for (int j = 1; j <= m; ++j) {
                    current_statement_begin__ = 26;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                multiply(stan::model::rvalue(Psi, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Psi"), stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "Theta")), 
                                "assigning variable mu");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 19;
            size_t Psi_j_1_max__ = m;
            size_t Psi_j_2_max__ = p;
            for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Psi(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Psi" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "Psi", Psi, 0);
            current_statement_begin__ = 20;
            size_t mu_j_1_max__ = m;
            size_t mu_j_2_max__ = ng;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "mu", mu, 0);
            // model body
            current_statement_begin__ = 32;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 33;
                lp_accum__.add(dirichlet_log<propto__>(get_base1(simp, i, "simp", 1), rep_vector(1.0, m)));
            }
            current_statement_begin__ = 35;
            for (int i = 1; i <= ng; ++i) {
                current_statement_begin__ = 36;
                for (int j = 1; j <= p; ++j) {
                    current_statement_begin__ = 37;
                    lp_accum__.add(gamma_log<propto__>(get_base1(Theta, j, i, "Theta", 1), get_base1(rk, j, "rk", 1), (get_base1(pk, j, "pk", 1) / (1 - get_base1(pk, j, "pk", 1)))));
                }
            }
            current_statement_begin__ = 40;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 41;
                lp_accum__.add(gamma_log<propto__>(get_base1(phi, i, "phi", 1), 1, 0.01));
            }
            current_statement_begin__ = 43;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 44;
                lp_accum__.add(neg_binomial_2_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"), stan::model::rvalue(mu, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(get_base1(g, i, "g", 1)), stan::model::nil_index_list())), "mu"), phi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Theta");
        names__.push_back("rk");
        names__.push_back("pk");
        names__.push_back("simp");
        names__.push_back("phi");
        names__.push_back("Psi");
        names__.push_back("mu");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(ng);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(ng);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gNBFA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Theta = in__.matrix_lb_constrain(0, p, ng);
        size_t Theta_j_2_max__ = ng;
        size_t Theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                vars__.push_back(Theta(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> rk = in__.vector_lb_constrain(0, p);
        size_t rk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < rk_j_1_max__; ++j_1__) {
            vars__.push_back(rk(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> pk = in__.vector_lub_constrain(0, 1, p);
        size_t pk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < pk_j_1_max__; ++j_1__) {
            vars__.push_back(pk(j_1__));
        }
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > simp;
        size_t simp_d_0_max__ = p;
        simp.reserve(simp_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < simp_d_0_max__; ++d_0__) {
            simp.push_back(in__.simplex_constrain(m));
        }
        size_t simp_j_1_max__ = m;
        size_t simp_k_0_max__ = p;
        for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < simp_k_0_max__; ++k_0__) {
                vars__.push_back(simp[k_0__](j_1__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> phi = in__.vector_lb_constrain(0, m);
        size_t phi_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 19;
            validate_non_negative_index("Psi", "m", m);
            validate_non_negative_index("Psi", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Psi(m, p);
            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi, DUMMY_VAR__);
            current_statement_begin__ = 20;
            validate_non_negative_index("mu", "m", m);
            validate_non_negative_index("mu", "ng", ng);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu(m, ng);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 21;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 22;
                stan::model::assign(Psi, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            get_base1(simp, i, "simp", 1), 
                            "assigning variable Psi");
            }
            current_statement_begin__ = 24;
            for (int i = 1; i <= ng; ++i) {
                current_statement_begin__ = 25;
                for (int j = 1; j <= m; ++j) {
                    current_statement_begin__ = 26;
                    stan::model::assign(mu, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                multiply(stan::model::rvalue(Psi, stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Psi"), stan::model::rvalue(Theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "Theta")), 
                                "assigning variable mu");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 19;
            check_greater_or_equal(function__, "Psi", Psi, 0);
            current_statement_begin__ = 20;
            check_greater_or_equal(function__, "mu", mu, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t Psi_j_2_max__ = p;
                size_t Psi_j_1_max__ = m;
                for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                        vars__.push_back(Psi(j_1__, j_2__));
                    }
                }
                size_t mu_j_2_max__ = ng;
                size_t mu_j_1_max__ = m;
                for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                        vars__.push_back(mu(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_gNBFA";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Theta_j_2_max__ = ng;
        size_t Theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < rk_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rk" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < pk_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pk" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t simp_j_1_max__ = m;
        size_t simp_k_0_max__ = p;
        for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < simp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "simp" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t phi_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Psi_j_2_max__ = p;
            size_t Psi_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_j_2_max__ = ng;
            size_t mu_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Theta_j_2_max__ = ng;
        size_t Theta_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < Theta_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < rk_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rk" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t pk_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < pk_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pk" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t simp_j_1_max__ = (m - 1);
        size_t simp_k_0_max__ = p;
        for (size_t j_1__ = 0; j_1__ < simp_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < simp_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "simp" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t phi_j_1_max__ = m;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Psi_j_2_max__ = p;
            size_t Psi_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_j_2_max__ = ng;
            size_t mu_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_gNBFA_namespace::model_gNBFA stan_model;
#endif
