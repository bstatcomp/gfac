// Generated by rstantools.  Do not edit by hand.

/*
    gfac is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    gfac is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with gfac.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_gFA_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gFA");
    reader.add_event(65, 63, "end", "model_gFA");
    return reader;
}
#include <stan_meta_header.hpp>
class model_gFA : public prob_grad {
private:
        int n;
        int m;
        int p;
        std::vector<int> g;
        int ng;
        matrix_d X;
public:
    model_gFA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gFA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gFA_namespace::model_gFA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            check_greater_or_equal(function__, "m", m, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 0);
            current_statement_begin__ = 5;
            validate_non_negative_index("g", "n", n);
            context__.validate_dims("data initialization", "g", "int", context__.to_vec(n));
            g = std::vector<int>(n, int(0));
            vals_i__ = context__.vals_i("g");
            pos__ = 0;
            size_t g_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < g_k_0_max__; ++k_0__) {
                g[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "ng", "int", context__.to_vec());
            ng = int(0);
            vals_i__ = context__.vals_i("ng");
            pos__ = 0;
            ng = vals_i__[pos__++];
            check_greater_or_equal(function__, "ng", ng, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("X", "m", m);
            validate_non_negative_index("X", "n", n);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(m,n));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, n);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = n;
            size_t X_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("Lambda", "m", m);
            validate_non_negative_index("Lambda", "p", p);
            num_params_r__ += (m * p);
            current_statement_begin__ = 12;
            validate_non_negative_index("iFactor", "p", p);
            validate_non_negative_index("iFactor", "ng", ng);
            num_params_r__ += (p * ng);
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            validate_non_negative_index("Psi_full", "m", m);
            validate_non_negative_index("Psi_full", "m", m);
            num_params_r__ += (m + ((m * (m - 1)) / 2));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gFA() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 11;
        if (!(context__.contains_r("Lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Lambda");
        pos__ = 0U;
        validate_non_negative_index("Lambda", "m", m);
        validate_non_negative_index("Lambda", "p", p);
        context__.validate_dims("parameter initialization", "Lambda", "matrix_d", context__.to_vec(m,p));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lambda(m, p);
        size_t Lambda_j_2_max__ = p;
        size_t Lambda_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lambda_j_1_max__; ++j_1__) {
                Lambda(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(Lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 12;
        if (!(context__.contains_r("iFactor")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable iFactor missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("iFactor");
        pos__ = 0U;
        validate_non_negative_index("iFactor", "p", p);
        validate_non_negative_index("iFactor", "ng", ng);
        context__.validate_dims("parameter initialization", "iFactor", "matrix_d", context__.to_vec(p,ng));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> iFactor(p, ng);
        size_t iFactor_j_2_max__ = ng;
        size_t iFactor_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < iFactor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < iFactor_j_1_max__; ++j_1__) {
                iFactor(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(iFactor);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable iFactor: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("fac_var")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable fac_var missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("fac_var");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "fac_var", "double", context__.to_vec());
        double fac_var(0);
        fac_var = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, fac_var);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable fac_var: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("Psi_full")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Psi_full missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Psi_full");
        pos__ = 0U;
        validate_non_negative_index("Psi_full", "m", m);
        validate_non_negative_index("Psi_full", "m", m);
        context__.validate_dims("parameter initialization", "Psi_full", "matrix_d", context__.to_vec(m,m));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Psi_full(m, m);
        size_t Psi_full_j_2_max__ = m;
        size_t Psi_full_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Psi_full_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Psi_full_j_1_max__; ++j_1__) {
                Psi_full(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(Psi_full);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Psi_full: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 11;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Lambda;
            (void) Lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                Lambda = in__.matrix_constrain(m, p, lp__);
            else
                Lambda = in__.matrix_constrain(m, p);
            current_statement_begin__ = 12;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> iFactor;
            (void) iFactor;  // dummy to suppress unused var warning
            if (jacobian__)
                iFactor = in__.matrix_constrain(p, ng, lp__);
            else
                iFactor = in__.matrix_constrain(p, ng);
            current_statement_begin__ = 13;
            local_scalar_t__ fac_var;
            (void) fac_var;  // dummy to suppress unused var warning
            if (jacobian__)
                fac_var = in__.scalar_lb_constrain(0, lp__);
            else
                fac_var = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Psi_full;
            (void) Psi_full;  // dummy to suppress unused var warning
            if (jacobian__)
                Psi_full = in__.cov_matrix_constrain(m, lp__);
            else
                Psi_full = in__.cov_matrix_constrain(m);
            // transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("Psi", "m", m);
            validate_non_negative_index("Psi", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Psi(m, m);
            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi, DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("Factor", "p", p);
            validate_non_negative_index("Factor", "n", n);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Factor(p, n);
            stan::math::initialize(Factor, DUMMY_VAR__);
            stan::math::fill(Factor, DUMMY_VAR__);
            current_statement_begin__ = 20;
            validate_non_negative_index("L_tri", "m", m);
            validate_non_negative_index("L_tri", "p", p);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_tri(m, p);
            stan::math::initialize(L_tri, DUMMY_VAR__);
            stan::math::fill(L_tri, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 22;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 23;
                for (int j = 1; j <= p; ++j) {
                    current_statement_begin__ = 24;
                    stan::model::assign(L_tri, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(Lambda, i, j, "Lambda", 1), 
                                "assigning variable L_tri");
                }
            }
            current_statement_begin__ = 27;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 28;
                for (int j = (i + 1); j <= p; ++j) {
                    current_statement_begin__ = 29;
                    stan::model::assign(L_tri, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable L_tri");
                }
            }
            current_statement_begin__ = 32;
            for (int j = 1; j <= p; ++j) {
                current_statement_begin__ = 33;
                stan::model::assign(L_tri, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable L_tri");
            }
            current_statement_begin__ = 35;
            for (int j = 1; j <= n; ++j) {
                current_statement_begin__ = 36;
                for (int i = 1; i <= p; ++i) {
                    current_statement_begin__ = 37;
                    stan::model::assign(Factor, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(iFactor, i, get_base1(g, j, "g", 1), "iFactor", 1), 
                                "assigning variable Factor");
                }
            }
            current_statement_begin__ = 41;
            stan::math::assign(Psi, Psi_full);
            current_statement_begin__ = 42;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 43;
                for (int j = 1; j <= m; ++j) {
                    current_statement_begin__ = 44;
                    if (as_bool(logical_neq(i, j))) {
                        current_statement_begin__ = 45;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable Psi");
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 18;
            size_t Psi_j_1_max__ = m;
            size_t Psi_j_2_max__ = m;
            for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Psi(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Psi" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Psi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cov_matrix(function__, "Psi", Psi);
            current_statement_begin__ = 19;
            size_t Factor_j_1_max__ = p;
            size_t Factor_j_2_max__ = n;
            for (size_t j_1__ = 0; j_1__ < Factor_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Factor_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Factor(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Factor" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Factor: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 20;
            size_t L_tri_j_1_max__ = m;
            size_t L_tri_j_2_max__ = p;
            for (size_t j_1__ = 0; j_1__ < L_tri_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < L_tri_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(L_tri(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: L_tri" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable L_tri: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            stan::math::check_cholesky_factor(function__, "L_tri", L_tri);
            // model body
            current_statement_begin__ = 52;
            lp_accum__.add(gamma_log<propto__>(fac_var, 0.5, 1));
            current_statement_begin__ = 53;
            lp_accum__.add(inv_wishart_log<propto__>(Psi_full, (m * m), diag_matrix(rep_vector(1, m))));
            current_statement_begin__ = 54;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 55;
                lp_accum__.add(multi_normal_log<propto__>(stan::model::rvalue(Lambda, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "Lambda"), rep_vector(0, m), Psi));
            }
            current_statement_begin__ = 56;
            for (int i = 1; i <= ng; ++i) {
                current_statement_begin__ = 57;
                for (int j = 1; j <= p; ++j) {
                    current_statement_begin__ = 58;
                    lp_accum__.add(normal_log<propto__>(get_base1(iFactor, j, i, "iFactor", 1), 0, fac_var));
                }
            }
            current_statement_begin__ = 61;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 62;
                lp_accum__.add(multi_normal_log<propto__>(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"), multiply(L_tri, stan::model::rvalue(Factor, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "Factor")), Psi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Lambda");
        names__.push_back("iFactor");
        names__.push_back("fac_var");
        names__.push_back("Psi_full");
        names__.push_back("Psi");
        names__.push_back("Factor");
        names__.push_back("L_tri");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(ng);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(p);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gFA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Lambda = in__.matrix_constrain(m, p);
        size_t Lambda_j_2_max__ = p;
        size_t Lambda_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lambda_j_1_max__; ++j_1__) {
                vars__.push_back(Lambda(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> iFactor = in__.matrix_constrain(p, ng);
        size_t iFactor_j_2_max__ = ng;
        size_t iFactor_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < iFactor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < iFactor_j_1_max__; ++j_1__) {
                vars__.push_back(iFactor(j_1__, j_2__));
            }
        }
        double fac_var = in__.scalar_lb_constrain(0);
        vars__.push_back(fac_var);
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Psi_full = in__.cov_matrix_constrain(m);
        size_t Psi_full_j_2_max__ = m;
        size_t Psi_full_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Psi_full_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Psi_full_j_1_max__; ++j_1__) {
                vars__.push_back(Psi_full(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 18;
            validate_non_negative_index("Psi", "m", m);
            validate_non_negative_index("Psi", "m", m);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Psi(m, m);
            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi, DUMMY_VAR__);
            current_statement_begin__ = 19;
            validate_non_negative_index("Factor", "p", p);
            validate_non_negative_index("Factor", "n", n);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Factor(p, n);
            stan::math::initialize(Factor, DUMMY_VAR__);
            stan::math::fill(Factor, DUMMY_VAR__);
            current_statement_begin__ = 20;
            validate_non_negative_index("L_tri", "m", m);
            validate_non_negative_index("L_tri", "p", p);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L_tri(m, p);
            stan::math::initialize(L_tri, DUMMY_VAR__);
            stan::math::fill(L_tri, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 22;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 23;
                for (int j = 1; j <= p; ++j) {
                    current_statement_begin__ = 24;
                    stan::model::assign(L_tri, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(Lambda, i, j, "Lambda", 1), 
                                "assigning variable L_tri");
                }
            }
            current_statement_begin__ = 27;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 28;
                for (int j = (i + 1); j <= p; ++j) {
                    current_statement_begin__ = 29;
                    stan::model::assign(L_tri, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable L_tri");
                }
            }
            current_statement_begin__ = 32;
            for (int j = 1; j <= p; ++j) {
                current_statement_begin__ = 33;
                stan::model::assign(L_tri, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            1, 
                            "assigning variable L_tri");
            }
            current_statement_begin__ = 35;
            for (int j = 1; j <= n; ++j) {
                current_statement_begin__ = 36;
                for (int i = 1; i <= p; ++i) {
                    current_statement_begin__ = 37;
                    stan::model::assign(Factor, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(iFactor, i, get_base1(g, j, "g", 1), "iFactor", 1), 
                                "assigning variable Factor");
                }
            }
            current_statement_begin__ = 41;
            stan::math::assign(Psi, Psi_full);
            current_statement_begin__ = 42;
            for (int i = 1; i <= m; ++i) {
                current_statement_begin__ = 43;
                for (int j = 1; j <= m; ++j) {
                    current_statement_begin__ = 44;
                    if (as_bool(logical_neq(i, j))) {
                        current_statement_begin__ = 45;
                        stan::model::assign(Psi, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    0, 
                                    "assigning variable Psi");
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 18;
            stan::math::check_cov_matrix(function__, "Psi", Psi);
            current_statement_begin__ = 20;
            stan::math::check_cholesky_factor(function__, "L_tri", L_tri);
            // write transformed parameters
            if (include_tparams__) {
                size_t Psi_j_2_max__ = m;
                size_t Psi_j_1_max__ = m;
                for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                        vars__.push_back(Psi(j_1__, j_2__));
                    }
                }
                size_t Factor_j_2_max__ = n;
                size_t Factor_j_1_max__ = p;
                for (size_t j_2__ = 0; j_2__ < Factor_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Factor_j_1_max__; ++j_1__) {
                        vars__.push_back(Factor(j_1__, j_2__));
                    }
                }
                size_t L_tri_j_2_max__ = p;
                size_t L_tri_j_1_max__ = m;
                for (size_t j_2__ = 0; j_2__ < L_tri_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < L_tri_j_1_max__; ++j_1__) {
                        vars__.push_back(L_tri(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_gFA";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Lambda_j_2_max__ = p;
        size_t Lambda_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t iFactor_j_2_max__ = ng;
        size_t iFactor_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < iFactor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < iFactor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "iFactor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "fac_var";
        param_names__.push_back(param_name_stream__.str());
        size_t Psi_full_j_2_max__ = m;
        size_t Psi_full_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Psi_full_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Psi_full_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Psi_full" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Psi_j_2_max__ = m;
            size_t Psi_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < Psi_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t Factor_j_2_max__ = n;
            size_t Factor_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < Factor_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Factor_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Factor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_tri_j_2_max__ = p;
            size_t L_tri_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < L_tri_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < L_tri_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "L_tri" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Lambda_j_2_max__ = p;
        size_t Lambda_j_1_max__ = m;
        for (size_t j_2__ = 0; j_2__ < Lambda_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Lambda_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t iFactor_j_2_max__ = ng;
        size_t iFactor_j_1_max__ = p;
        for (size_t j_2__ = 0; j_2__ < iFactor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < iFactor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "iFactor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "fac_var";
        param_names__.push_back(param_name_stream__.str());
        size_t Psi_full_j_1_max__ = (m + ((m * (m - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < Psi_full_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Psi_full" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t Psi_j_1_max__ = (m + ((m * (m - 1)) / 2));
            for (size_t j_1__ = 0; j_1__ < Psi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Psi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Factor_j_2_max__ = n;
            size_t Factor_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < Factor_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Factor_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Factor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t L_tri_j_1_max__ = (((p * (p + 1)) / 2) + ((m - p) * p));
            for (size_t j_1__ = 0; j_1__ < L_tri_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_tri" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_gFA_namespace::model_gFA stan_model;
#endif
